{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ai/prompt-engineering/","title":"Prompt Engineering","text":""},{"location":"ai/prompt-engineering/#what-is-a-prompt","title":"What is a Prompt?","text":"<ul> <li>Structuring inputs (questions or commands) to guide an AI model to produce accurate and relevant output.</li> <li>Helps reduce hallucinations, bias, and vague answers.</li> <li>Useful for anyone working with AI: developers, researchers, content creators, and more.</li> </ul>"},{"location":"ai/prompt-engineering/#types-of-prompts","title":"Types of Prompts","text":"<p>There are several common types of prompts used with AI language models:</p> <ul> <li>Zero-shot Prompting: Give the model a task without examples.</li> <li>Few-shot Prompting: Show the model a few examples to guide its responses.</li> <li>Chain-of-thought Prompting: Ask the model to reason step-by-step.</li> <li>Instruction-based Prompting: Provide clear, structured instructions.</li> <li>Role-based Prompting: Assign a role or persona to the model.</li> <li>Contextual or Dynamic Prompting: Insert relevant background/context before the question.</li> <li>Multi-turn Prompting: Build context across a conversation.</li> <li>Prompt Chaining (Modular Prompting): Break tasks into smaller steps, using outputs as new inputs.</li> </ul> <p>For detailed definitions and examples, see Types of Prompts.</p>"},{"location":"ai/prompt-engineering/#why-prompt-engineering-matters","title":"Why Prompt Engineering Matters","text":"<p>Prompt engineering means crafting prompts to guide AI models. The main goals: - Improve accuracy and relevance of responses - Minimize hallucinations (false information) - Reduce ambiguity in instructions - Encourage creative or insightful results when needed</p>"},{"location":"ai/prompt-engineering/#principles-of-good-prompt-engineering","title":"Principles of Good Prompt Engineering","text":"<p>Use these principles for better prompts: - Clarity: Be specific and unambiguous. - Context: Give background if needed. - Structure: Use lists or clear formatting. - Examples: Show what you want the AI to produce. - Role Play: Ask the AI to act as an expert or persona if helpful.</p>"},{"location":"ai/prompt-engineering/#tips-for-better-prompts","title":"Tips for Better Prompts","text":"<ol> <li>Be clear and specific <p>Bad: \"Tell me about plants.\" Good: \"What are the benefits of growing lettuce in a hydroponic NFT system indoors?\"</p> </li> </ol> <p>Include relevant context, constraints, or goals in your prompt.</p> <ol> <li>Provide a role or perspective (optional but powerful) <p>\"Act as a data scientist. Can you explain how to fine-tune a transformer model using PyTorch?\"  </p> </li> </ol> <p>This helps the AI simulate a more accurate tone or specialist mindset.</p> <ol> <li>Break complex queries into steps <p>\"I want to write a research paper. First, help me outline the key sections, then we can work on each section together.\"  </p> </li> </ol> <p>Chunking improves focus and minimizes confusion.</p> <ol> <li>Set the format you want <p>\"Give me a bullet-point summary.\" \"Write it as a table with columns: Feature | Description | Pros | Cons.\"  </p> </li> </ol> <p>This keeps answers structured and easy to digest.</p> <ol> <li>Use examples for clarification <p>\"I want my writing to sound like this: 'The sunset poured gold over the quiet hills.' Can you improve my paragraph to match that style?\"  </p> </li> </ol> <p>Examples reduce hallucination and improve alignment with your intention.</p> <ol> <li>Specify what you don't want <p>\"Don't include historical background \u2014 just focus on current applications of AI in healthcare.\"  </p> </li> </ol> <p>This prevents unnecessary or off-topic output.</p> <ol> <li>Iterate and refine <p>Ask, review, then say: \"This is close, but could you make it more formal / concise / technical?\"  </p> </li> </ol> <p>You don't have to get the perfect prompt the first time \u2014 interactive refinement is key.</p>"},{"location":"ai/prompt-engineering/#pitfalls-to-avoid","title":"Pitfalls to Avoid","text":"Common Issue How to Fix Too vague Add details or constraints Unclear task Explain expected output Overly long Break into steps"},{"location":"ai/prompt-engineering/#improving-your-prompts","title":"Improving Your Prompts","text":"<p>Prompt engineering is experimental. You may need to: - Rewrite from a new perspective - Add constraints (e.g., word count, tone) - Remove extra context</p> <p>Test and revise your prompts for best results.</p>"},{"location":"ai/prompt-engineering/#further-tips","title":"Further Tips","text":"<ul> <li>Use markdown formatting to structure prompts and outputs.</li> <li>Chain prompts: use one output as input for the next task.</li> <li>Ask the AI to explain its reasoning if you need clarity.</li> </ul>"},{"location":"ai/prompt-engineering/#example-transformation","title":"Example Transformation","text":"Type Prompt Example Too vague \"Tell me about AI\" Better \"Explain how AI is used in fraud detection in financial institutions.\" Best \"Act as a security engineer.Explain how machine learning helps detect fraud in banking systems,including common algorithms and real-world challenges.\""},{"location":"ai/prompt-engineering/#how-to-reduce-hallucinations","title":"How to Reduce Hallucinations","text":"<ul> <li>Ask for sources, assumptions, or step-by-step reasoning.</li> <li>Example: \"Can you give me a step-by-step explanation of how you arrived at this answer?\"</li> <li>Request external verification if accuracy is critical.</li> <li>Avoid vague or open-ended questions unless you're brainstorming.</li> </ul>"},{"location":"ai/prompt-engineering/#related-topics","title":"Related Topics","text":"<ul> <li>AI Hallucination</li> <li>Few-shot Learning</li> <li>Zero-shot Prompting</li> <li>Chain-of-Thought Prompting</li> </ul>"},{"location":"ai/prompt-engineering/#references","title":"References","text":"<ul> <li>OpenAI Cookbook: Prompt Engineering</li> <li>DeepLearning.AI: Prompt Engineering Guide</li> <li>Google: Prompt Design</li> <li>Prompt Engineering for AI Agents</li> </ul>"},{"location":"ai/types-of-prompts/","title":"Types of Prompts","text":"<p>This page describes common types of prompts used with AI language models. Each type includes a definition, example, and when to use it.</p>"},{"location":"ai/types-of-prompts/#1-zero-shot-prompting","title":"1. Zero-shot Prompting","text":"<p>What it is: You give the model a task without examples.</p> <p>Example </p> <p>Q: Translate this sentence into French: I love pizza. A: J'adore la pizza.</p> <p>When to use: Simple or well-known tasks.</p>"},{"location":"ai/types-of-prompts/#2-few-shot-prompting","title":"2. Few-shot Prompting","text":"<p>What it is: You show the model a few examples of how you want it to respond.</p> <p>Example </p> <p>Q: Translate into French: \u2013 I love pizza. \u2192 J'adore la pizza. \u2013 She is happy. \u2192 Elle est heureuse. \u2013 He is tired. \u2192 A: Il est fatigu\u00e9.</p> <p>When to use: To guide the model with patterns.</p>"},{"location":"ai/types-of-prompts/#3-chain-of-thought-prompting","title":"3. Chain-of-thought Prompting","text":"<p>What it is: You explicitly ask the model to reason step-by-step.</p> <p>Example </p> <p>Q: If a train leaves the station at 3 PM and travels for 2 hours, what time does it arrive? Let's think step by step. A: The train leaves at 3 PM. It travels for 2 hours. 3 PM plus 2 hours is 5 PM. So, the train arrives at 5 PM.</p> <p>When to use: Math, logic, and complex reasoning.</p>"},{"location":"ai/types-of-prompts/#4-instruction-based-prompting","title":"4. Instruction-based Prompting","text":"<p>What it is: You give very clear, structured instructions.</p> <p>Example </p> <p>Q: Summarize this paragraph in 2 sentences focusing only on the main idea. A: The paragraph discusses the importance of teamwork in achieving goals. It emphasizes that collaboration leads to better results than working alone.</p> <p>When to use: For high precision or consistent format.</p>"},{"location":"ai/types-of-prompts/#5-role-based-prompting","title":"5. Role-based Prompting","text":"<p>What it is: You assign a role or persona to the model.</p> <p>Example </p> <p>Q: You are a professional lawyer. Explain this legal term in simple language: \"Habeas Corpus\". A: \"Habeas Corpus\" is a legal term that means a person has the right to be brought before a judge if they are being held in jail, to make sure their detention is lawful.</p> <p>When to use: To match tone, expertise, or audience.</p>"},{"location":"ai/types-of-prompts/#6-contextual-or-dynamic-prompting","title":"6. Contextual or Dynamic Prompting","text":"<p>What it is: You insert relevant background/context before the question.</p> <p>Example </p> <p>Q: In the context of European history during the 19th century, explain the causes of the French Revolution. A: The French Revolution was caused by social inequality, economic hardship, and the influence of Enlightenment ideas, which led people to demand more rights and a fairer government.</p> <p>When to use: When the task depends heavily on prior information.</p>"},{"location":"ai/types-of-prompts/#7-multi-turn-prompting","title":"7. Multi-turn Prompting","text":"<p>What it is: Building context across a conversation.</p> <p>Example </p> <p>Q: (Turn 1) Imagine you are a travel agent. I want to visit Italy. A: (Turn 1) That sounds wonderful! What cities in Italy are you interested in visiting? Q: (Turn 2) I'm interested in Rome and Venice. What are the must-see attractions? A: (Turn 2) In Rome, you should visit the Colosseum, the Vatican, and the Trevi Fountain. In Venice, don't miss St. Mark's Basilica, the Grand Canal, and a gondola ride.</p> <p>When to use: For dialogue, memory-based reasoning, tutoring, etc.</p>"},{"location":"ai/types-of-prompts/#8-prompt-chaining-modular-prompting","title":"8. Prompt Chaining (Modular Prompting)","text":"<p>What it is: Breaking tasks into smaller steps and using the output of one as the input of the next.</p> <p>Example </p> <p>Q (Step 1): Extract all dates from this text: \"The conference was held on March 3, 2022, and the next meeting is scheduled for July 15, 2023.\" A (Step 1): March 3, 2022; July 15, 2023 Q (Step 2): For each date, summarize the event that happened. A (Step 2): - March 3, 2022: The conference was held. - July 15, 2023: The next meeting is scheduled.</p> <p>When to use: For complex tasks like code generation, document parsing, etc. </p>"},{"location":"blog/2025-06-01-why-event-driven-architecture-scales/","title":"Why Event-Driven Architecture Scales","text":"<p>Event-driven systems respond to events and messages asynchronously.</p>"},{"location":"blog/2025-06-01-why-event-driven-architecture-scales/#benefits","title":"Benefits","text":"<ul> <li>Loose coupling</li> <li>High scalability</li> <li>Real-time processing</li> </ul> <p>Commonly used in modern cloud-native applications.</p>"},{"location":"software-architecture/architectural-views/","title":"Software Architecture","text":""},{"location":"software-architecture/architectural-views/#cmu-sei-three-views","title":"CMU SEI Three Views","text":"<p>The CMU SEI (Software Engineering Institute) Three Views is a classic approach to documenting software architecture. The three views are:</p>"},{"location":"software-architecture/architectural-views/#1-module-view-decomposition-view","title":"1. Module View (Decomposition View)","text":"<ul> <li>What it shows: The static structure of the system in terms of modules (e.g., packages, classes, files).</li> <li>Purpose: Shows how the system is decomposed into implementation units and how these units relate to each other.</li> <li>Audience: Developers, maintainers.</li> <li>Details:      -Shows how the system is broken down into modules (e.g., packages, classes, files).<ul> <li>Focuses on code structure, encapsulation, and dependencies.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>classDiagram\n    class AuthModule\n    class UserModule\n    class OrderModule\n    class PaymentModule\n\n    AuthModule &lt;|-- UserModule : uses\n    UserModule &lt;|-- OrderModule : uses\n    OrderModule &lt;|-- PaymentModule : uses</code></pre>"},{"location":"software-architecture/architectural-views/#2-component-and-connector-view-cc-view","title":"2. Component-and-Connector View (C&amp;C View)","text":"<ul> <li>What it shows: The dynamic structure of the system as a set of components (units of computation) and connectors (interaction mechanisms).</li> <li>Purpose: Illustrates how runtime elements interact, such as processes, threads, data flows, and communication paths.</li> <li>Audience: System integrators, testers, performance engineers.</li> <li>Details: <ul> <li>Shows the runtime structure: components (processes, services) and connectors (communication, data flow).</li> <li>Focuses on how parts of the system interact at runtime.</li> </ul> </li> <li>Example: A diagram showing how services communicate over a network.</li> </ul> <pre><code>flowchart LR\n    ClientApp --&gt;|REST API| APIGateway\n    APIGateway --&gt;|gRPC| UserService\n    APIGateway --&gt;|gRPC| OrderService\n    OrderService --&gt;|Event| PaymentService\n    UserService --&gt;|DB| UserDB[(User Database)]\n    OrderService --&gt;|DB| OrderDB[(Order Database)]\n    PaymentService --&gt;|DB| PaymentDB[(Payment Database)]</code></pre>"},{"location":"software-architecture/architectural-views/#3-allocation-view","title":"3. Allocation View","text":"<ul> <li>What it shows: The mapping of software elements to the environment, such as hardware, file systems, or teams.</li> <li>Purpose: Shows how software is deployed, assigned to hardware, or mapped to development teams.</li> <li>Audience: System engineers, deployment engineers, project managers.</li> <li>Details: <ul> <li>Shows how software elements are mapped to hardware, file systems, or teams.</li> <li>Focuses on deployment, physical distribution, or team responsibility.</li> </ul> </li> <li>Example: A deployment diagram mapping software components to servers.</li> </ul> <pre><code>graph TD\n    subgraph AWS_Cloud[Cloud Provider]\n        subgraph VPC[Virtual Private Cloud]\n            subgraph Public_Subnet\n                LB[Load Balancer]\n            end\n            subgraph Private_Subnet\n                App1[App Server 1]\n                App2[App Server 2]\n                DB[(Database Cluster)]\n                Cache[(Redis Cache)]\n            end\n        end\n    end\n\n    Internet --&gt;|HTTPS| LB\n    LB --&gt; App1\n    LB --&gt; App2\n    App1 --&gt; DB\n    App2 --&gt; DB\n    App1 --&gt; Cache\n    App2 --&gt; Cache</code></pre>"},{"location":"software-architecture/architectural-views/#rup-41-views","title":"RUP 4+1 Views","text":"<p>RUP uses the \"4+1\" View Model, which consists of five views:</p>"},{"location":"software-architecture/architectural-views/#1-logical-view","title":"1. Logical View","text":"<ul> <li>What it shows: The object model of the design (e.g., class diagrams).</li> <li>Purpose: Addresses the functionality that the system provides to end-users.</li> <li>Audience: End-users, analysts, designers.</li> <li>Details: <ul> <li>Shows the object model of the design (e.g., class diagrams).</li> <li>Focuses on functionality provided to end-users.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>classDiagram\n    class User\n    class Order\n    class Product\n    class ShoppingCart\n\n    User \"1\" -- \"*\" Order : places\n    Order \"*\" -- \"*\" Product : contains\n    User \"1\" -- \"1\" ShoppingCart : owns\n    ShoppingCart \"*\" -- \"*\" Product : holds</code></pre>"},{"location":"software-architecture/architectural-views/#2-development-view-implementation-view","title":"2. Development View (Implementation View)","text":"<ul> <li>What it shows: The static organization of the software in the development environment (e.g., module structure).</li> <li>Purpose: Focuses on software management, configuration, and reuse.</li> <li>Audience: Programmers, software managers.</li> <li>Details: <ul> <li>Shows the static organization of the software in the development environment (e.g., module structure).</li> <li>Focuses on software management, configuration, and reuse.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>graph TD\n    subgraph src\n        subgraph controllers\n            UserController\n            OrderController\n        end\n        subgraph services\n            UserService\n            OrderService\n        end\n        subgraph models\n            UserModel\n            OrderModel\n            ProductModel\n        end\n        subgraph repositories\n            UserRepository\n            OrderRepository\n        end\n    end\n\n    UserController --&gt; UserService\n    OrderController --&gt; OrderService\n    UserService --&gt; UserRepository\n    OrderService --&gt; OrderRepository\n    UserService --&gt; UserModel\n    OrderService --&gt; OrderModel\n    OrderModel --&gt; ProductModel</code></pre>"},{"location":"software-architecture/architectural-views/#3-process-view","title":"3. Process View","text":"<ul> <li>What it shows: The dynamic aspects of the system, such as processes and their interactions.</li> <li>Purpose: Addresses concurrency, performance, and scalability.</li> <li>Audience: System integrators, performance engineers.</li> <li>Details: <ul> <li>Shows the dynamic aspects of the system, such as processes and their interactions.</li> <li>Focuses on concurrency, performance, and scalability.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>sequenceDiagram\n    participant User\n    participant WebApp\n    participant OrderService\n    participant PaymentGateway\n    participant InventoryService\n\n    User-&gt;&gt;WebApp: Place order\n    WebApp-&gt;&gt;OrderService: Create order\n    OrderService-&gt;&gt;InventoryService: Reserve items\n    OrderService-&gt;&gt;PaymentGateway: Process payment\n    PaymentGateway--&gt;&gt;OrderService: Payment confirmation\n    InventoryService--&gt;&gt;OrderService: Reservation confirmation\n    OrderService-&gt;&gt;WebApp: Order confirmation\n    WebApp-&gt;&gt;User: Show confirmation</code></pre>"},{"location":"software-architecture/architectural-views/#4-physical-view-deployment-view","title":"4. Physical View (Deployment View)","text":"<ul> <li>What it shows: The mapping of software onto hardware and the physical distribution of components.</li> <li>Purpose: Deals with system topology, communication, and deployment.</li> <li>Audience: System engineers, deployment engineers.</li> <li>Details: <ul> <li>Shows the mapping of software onto hardware and the physical distribution of components.</li> <li>Focuses on system topology, communication, and deployment.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>flowchart TD\n    subgraph Internet\n        UserClient\n    end\n    subgraph DMZ\n        LB[Load Balancer]\n    end\n    subgraph Web_Tier\n        Web1[Web Server 1]\n        Web2[Web Server 2]\n    end\n    subgraph App_Tier\n        App1[App Server 1]\n        App2[App Server 2]\n    end\n    subgraph Data_Tier\n        DB1[(Primary Database)]\n        DB2[(Replica Database)]\n        FS[(File Storage)]\n        Cache[(Redis Cache)]\n    end\n\n    UserClient --&gt; LB\n    LB --&gt; Web1\n    LB --&gt; Web2\n    Web1 --&gt; App1\n    Web2 --&gt; App2\n    App1 --&gt; DB1\n    App2 --&gt; DB1\n    DB1 --&gt; DB2\n    App1 --&gt; FS\n    App2 --&gt; FS\n    App1 --&gt; Cache\n    App2 --&gt; Cache </code></pre>"},{"location":"software-architecture/architectural-views/#5-use-case-view-1-view","title":"5. Use Case View (\"+1\" View)","text":"<ul> <li>What it shows: The scenarios and use cases that drive the architecture.</li> <li>Purpose: Ties all the other views together by showing how they support the required functionality.</li> <li>Audience: All stakeholders.</li> <li>Details: <ul> <li>Shows the scenarios and use cases that drive the architecture.</li> <li>Focuses on tying all the other views together by showing how they support the required functionality.</li> </ul> </li> <li>Example: A class diagram showing how classes are organized into packages.</li> </ul> <pre><code>flowchart TD\n    User((User)) --&gt;|Login| AuthSystem\n    User --&gt;|Browse| Catalog\n    User --&gt;|Add to Cart| ShoppingCart\n    User --&gt;|Checkout| OrderSystem\n    OrderSystem --&gt;|Payment| PaymentGateway\n    OrderSystem --&gt;|Inventory Check| InventorySystem</code></pre>"},{"location":"software-architecture/architectural-views/#summary-table","title":"Summary Table","text":"Framework View Name Focus/What it Shows CMU SEI Module Static structure (modules, packages) Component-and-Connector Runtime structure (components, connectors) Allocation Mapping to environment (hardware, teams) RUP (4+1) Logical Object model, functionality Development Implementation structure Process Dynamic behavior, concurrency Physical Deployment, hardware mapping Use Case Scenarios, requirements"},{"location":"software-architecture/design-principles/","title":"Design Principles","text":""},{"location":"software-architecture/design-principles/#key-principles","title":"Key Principles","text":"<ul> <li>Separation of Concerns</li> <li>Modularity</li> <li>Encapsulation</li> <li>Loose Coupling &amp; High Cohesion</li> <li>Scalability &amp; Resilience</li> </ul> <p>These principles ensure systems are flexible, testable, and maintainable.</p>"},{"location":"software-architecture/patterns/layered/","title":"Layered Architecture Pattern","text":"<p>Divides systems into layers (e.g., Presentation, Business, Data) with clear responsibilities.</p>"},{"location":"software-architecture/patterns/layered/#benefits","title":"Benefits","text":"<ul> <li>Separation of concerns</li> <li>Easy testing</li> <li>Simplicity</li> </ul>"},{"location":"software-architecture/patterns/layered/#limitations","title":"Limitations","text":"<ul> <li>Tight coupling across layers</li> <li>Performance overhead</li> </ul>"},{"location":"software-architecture/patterns/microservices/","title":"Microservices Pattern","text":"<p>Breaks applications into small, independent services that communicate via APIs.</p>"},{"location":"software-architecture/patterns/microservices/#benefits","title":"Benefits","text":"<ul> <li>Independent deployment</li> <li>Technology heterogeneity</li> <li>Fault isolation</li> </ul>"},{"location":"software-architecture/patterns/microservices/#challenges","title":"Challenges","text":"<ul> <li>Complexity in orchestration</li> <li>Data consistency</li> </ul>"}]}