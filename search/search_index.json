{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ai/","title":"Artificial Intelligence","text":""},{"location":"blog/2025-06-01-why-event-driven-architecture-scales/","title":"Why Event-Driven Architecture Scales","text":"<p>Event-driven systems respond to events and messages asynchronously.</p>"},{"location":"blog/2025-06-01-why-event-driven-architecture-scales/#benefits","title":"Benefits","text":"<ul> <li>Loose coupling</li> <li>High scalability</li> <li>Real-time processing</li> </ul> <p>Commonly used in modern cloud-native applications.</p>"},{"location":"software-architecture/","title":"Software Architecture","text":""},{"location":"software-architecture/#overview","title":"Overview","text":"<p>Software architecture defines the high-level structure of a software system, guiding its organization, components, and interactions.</p> <p>Well-structured architecture supports scalability, maintainability, and performance.</p>"},{"location":"software-architecture/design-principles/","title":"Design Principles","text":""},{"location":"software-architecture/design-principles/#key-principles","title":"Key Principles","text":"<ul> <li>Separation of Concerns</li> <li>Modularity</li> <li>Encapsulation</li> <li>Loose Coupling &amp; High Cohesion</li> <li>Scalability &amp; Resilience</li> </ul> <p>These principles ensure systems are flexible, testable, and maintainable.</p>"},{"location":"software-architecture/patterns/layered/","title":"Layered Architecture Pattern","text":"<p>Divides systems into layers (e.g., Presentation, Business, Data) with clear responsibilities.</p>"},{"location":"software-architecture/patterns/layered/#benefits","title":"Benefits","text":"<ul> <li>Separation of concerns</li> <li>Easy testing</li> <li>Simplicity</li> </ul>"},{"location":"software-architecture/patterns/layered/#limitations","title":"Limitations","text":"<ul> <li>Tight coupling across layers</li> <li>Performance overhead</li> </ul>"},{"location":"software-architecture/patterns/microservices/","title":"Microservices Pattern","text":"<p>Breaks applications into small, independent services that communicate via APIs.</p>"},{"location":"software-architecture/patterns/microservices/#benefits","title":"Benefits","text":"<ul> <li>Independent deployment</li> <li>Technology heterogeneity</li> <li>Fault isolation</li> </ul>"},{"location":"software-architecture/patterns/microservices/#challenges","title":"Challenges","text":"<ul> <li>Complexity in orchestration</li> <li>Data consistency</li> </ul>"}]}